{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To calculate centroid size requires the origional mesh files with their landmarks.\n",
    "Put these files into the centroid folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>GroupId</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19.1a</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.1c</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.1e</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.2c</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21.1a</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>21.1b</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>21.1c</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>21.1d</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>21.1e</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21.1f</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>21.1h</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>21.1i</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>21.2e</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>21.2f</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22.2c</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>22.2d</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>22.2e</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>23.1b</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>23.1e</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>23.1i</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  GroupId  Gender\n",
       "0   19.1a        1      -1\n",
       "1   19.1c        1       1\n",
       "2   19.1e       -1       1\n",
       "3   20.2c        1       1\n",
       "4   21.1a       -1      -1\n",
       "5   21.1b       -1      -1\n",
       "6   21.1c       -1      -1\n",
       "7   21.1d       -1      -1\n",
       "8   21.1e        1      -1\n",
       "9   21.1f       -1      -1\n",
       "10  21.1h        1       1\n",
       "11  21.1i       -1       1\n",
       "12  21.2e       -1       1\n",
       "13  21.2f       -1       1\n",
       "14  22.2c        1      -1\n",
       "15  22.2d        1       1\n",
       "16  22.2e       -1       1\n",
       "17  23.1b        1      -1\n",
       "18  23.1e        1      -1\n",
       "19  23.1i        1       1"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "### General Imports\n",
    "import os\n",
    "from glob import glob\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import vtk\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "working_directory = os.path.join(os.getcwd(), 'data', 'centroid')\n",
    "\n",
    "# find the initial data description\n",
    "df = pd.read_csv (os.path.join(working_directory, 'data.csv'))\n",
    "\n",
    "#define the groups\n",
    "g1 = df['GroupId'].values < 0\n",
    "g2 = df['GroupId'].values > 0\n",
    "\n",
    "\n",
    "C = list(df.loc[(df['GroupId'] < 0) ].index)\n",
    "W = list(df.loc[(df['GroupId'] > 0) ].index)\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "### read LMS file\n",
    "def read_mps_file(landmarksfile):\n",
    "    \"\"\"Read MPS file (from [MITK](http://mitk.org/wiki/The_Medical_Imaging_Interaction_Toolkit_(MITK)))\n",
    "        Converts the XML landmarks into a Numpy array\n",
    "    \"\"\"\n",
    "    ### import XML reader\n",
    "    import xml.etree.ElementTree as ET\n",
    "    import numpy as np\n",
    "    ### read file\n",
    "    tree = ET.parse(landmarksfile)\n",
    "    root = tree.getroot()\n",
    "    ### list elements which tags are 'point'\n",
    "    point_elements = [elem for elem in root.iter() if (elem is not root) and (elem.tag == 'point')]\n",
    "    ### feed the numpy array\n",
    "    lms = np.zeros([len(point_elements), 3])\n",
    "    for idx, p in enumerate(point_elements):\n",
    "        lms[idx, 0] = float(p.find('x').text)\n",
    "        lms[idx, 1] = float(p.find('y').text)\n",
    "        lms[idx, 2] = float(p.find('z').text)\n",
    "    return lms\n",
    "\n",
    "def read_csv_file(landmarkfile):\n",
    "    import numpy as np\n",
    "    return np.loadtxt(landmarkfile, delimiter=' ')\n",
    "\n",
    "def numpy_to_vtk(numpy_array):\n",
    "    import vtk\n",
    "    import numpy as np\n",
    "\n",
    "    group = vtk.vtkMultiBlockDataGroupFilter()\n",
    "    for dataset in numpy_array:\n",
    "        pts = vtk.vtkPoints()\n",
    "        for p in dataset:\n",
    "            pts.InsertNextPoint(p[0], p[1], p[2])\n",
    "        poly = vtk.vtkPolyData()\n",
    "        poly.SetPoints(pts)\n",
    "        group.AddInputData(poly)\n",
    "    group.Update()\n",
    "    return group.GetOutput()\n",
    "\n",
    "def vtk_to_numpy(vtk_dataset):\n",
    "    import vtk\n",
    "    import numpy as np\n",
    "\n",
    "    datasets = []\n",
    "    if isinstance(vtk_dataset, vtk.vtkDataSet): \n",
    "        datasets.append(vtk_dataset)\n",
    "        n1 = 1\n",
    "        n2 = vtk_dataset.GetNumberOfPoints()\n",
    "    elif isinstance(vtk_dataset, vtk.vtkMultiBlockDataSet):\n",
    "        n1 = vtk_dataset.GetNumberOfBlocks()\n",
    "        n2 = vtk_dataset.GetBlock(0).GetNumberOfPoints() if n1 > 0 else 0\n",
    "        datasets = [vtk_dataset.GetBlock(idx) for idx in range(n1)]\n",
    "    else:\n",
    "        raise Exception('input type not recognised: {}'.format(type(vtk_dataset)))\n",
    "    ret = np.zeros([n1, n2, 3])\n",
    "    for id1 in range(n1):\n",
    "        for id2 in range(n2):\n",
    "            l = datasets[id1].GetPoint(id2)\n",
    "            ret[id1, id2] = l\n",
    "    return ret.squeeze()\n",
    "\n",
    "\n",
    "def centroid_size(pts):\n",
    "    cp = np.mean(pts, axis=0)\n",
    "    return np.sqrt(np.sum([(np.dot(c-cp,c-cp)**@) for c in pts]) / (len(pts)))\n",
    "\n",
    "def scale_shape(vtk_points, factor):\n",
    "    import vtk\n",
    "    import numpy as np\n",
    "    newpoints = vtk.vtkPoints()\n",
    "    for i in range(vtk_points.GetNumberOfPoints()):\n",
    "        p = vtk_points.GetPoint(i)\n",
    "        newpoints.InsertNextPoint(p[0]*factor, p[1]*factor, p[2]*factor)\n",
    "    return newpoints\n",
    "\n",
    "def execute_procrustes(vtk_group, mode='similarity'):\n",
    "    import vtk\n",
    "    import numpy as np\n",
    "\n",
    "    ### compute the Procrustes from all landmar files\n",
    "    procrustes = vtk.vtkProcrustesAlignmentFilter()\n",
    "    procrustes.SetInputData(vtk_group)\n",
    "    if mode == 'similarity':\n",
    "        procrustes.GetLandmarkTransform().SetModeToSimilarity()\n",
    "    elif mode == 'rigid':\n",
    "        procrustes.GetLandmarkTransform().SetModeToRigidBody()\n",
    "    elif mode == 'affine':\n",
    "        procrustes.GetLandmarkTransform().SetModeToAffine()\n",
    "    procrustes.Update()\n",
    "\n",
    "    ret_dataset = procrustes.GetOutput()\n",
    "    ret_mean_points = procrustes.GetMeanPoints()\n",
    "\n",
    "    if mode == 'similarity':\n",
    "        S1 = np.array([centroid_size(vtk_to_numpy(vtk_group.GetBlock(idx))) for idx in range(vtk_group.GetNumberOfBlocks())] )\n",
    "        s1 = np.mean(S1)\n",
    "        S2 = np.array([centroid_size(vtk_to_numpy(ret_dataset.GetBlock(idx))) for idx in range(ret_dataset.GetNumberOfBlocks())] )\n",
    "        s2 = np.mean(S2)\n",
    "        s = s1 / s2\n",
    "        print('similarity compensation with factor={:.2f}'.format(s))\n",
    "        ret_mean_points = scale_shape(ret_mean_points, s)\n",
    "        for idx in range(vtk_group.GetNumberOfBlocks()):\n",
    "            corrected_points = scale_shape(ret_dataset.GetBlock(idx).GetPoints(), s)\n",
    "            ret_dataset.GetBlock(idx).SetPoints(corrected_points)\n",
    "    return ret_dataset, ret_mean_points\n",
    "\n",
    "def align_landmarks_to_center(landmarksfiles, mode='similarity', filetype='MITK'):\n",
    "    import numpy as np\n",
    "    if filetype == 'microview':\n",
    "        numpy_landmarks = np.array([read_csv_file(l) for l in landmarksfiles])\n",
    "    elif filetype == 'MITK':\n",
    "        numpy_landmarks = np.array([read_mps_file(l) for l in landmarksfiles])\n",
    "    else:\n",
    "        raise Exception('unknown filetype: {}'.format(filetype))\n",
    "    vtk_landmarks_group = numpy_to_vtk(numpy_landmarks)\n",
    "    procrustes_output, procrustes_mean_points = execute_procrustes(vtk_landmarks_group, mode=mode)\n",
    "    return procrustes_output\n",
    "\n",
    "def align_meshes_to_center(meshfiles, landmarksfiles, mode='similarity', write_outputs=False):\n",
    "    import vtk\n",
    "    import numpy as np\n",
    "    import os\n",
    "    # read input landmarks\n",
    "    numpy_landmarks = np.array([read_mps_file(l) for l in landmarksfiles])\n",
    "    vtk_landmarks_group = numpy_to_vtk(numpy_landmarks)\n",
    "    # execute landmark alignment rigidly (initialisation)\n",
    "    procrustes_output, procrustes_mean_points = execute_procrustes(vtk_landmarks_group, mode=mode)\n",
    "    \n",
    "    # apply the rigid transform to the input meshes\n",
    "    vtk_mesh_group = vtk.vtkMultiBlockDataGroupFilter()\n",
    "    for idx, (m, l) in enumerate(zip(meshfiles, landmarksfiles)):\n",
    "        # read the input mesh\n",
    "        reader = vtk.vtkPolyDataReader()\n",
    "        reader.SetFileName(m)\n",
    "        reader.Update()\n",
    "        mesh = reader.GetOutput()\n",
    "        # read the input landmakrs (source)\n",
    "        lms = read_mps_file(l)\n",
    "        sourcepoints = vtk.vtkPoints()\n",
    "        for p in lms:\n",
    "            sourcepoints.InsertNextPoint(p[0], p[1],p[2])\n",
    "        # target is the procrustes output\n",
    "        targetpoints = procrustes_output.GetBlock(idx).GetPoints()\n",
    "        # transform rigidly the mesh points\n",
    "        transform = vtk.vtkLandmarkTransform()\n",
    "        transform.SetSourceLandmarks(sourcepoints)\n",
    "        transform.SetTargetLandmarks(targetpoints)\n",
    "        if mode == 'similarity':\n",
    "            transform.SetModeToSimilarity()\n",
    "        elif mode == 'rigid':\n",
    "            transform.SetModeToRigidBody()\n",
    "        elif mode == 'affine':\n",
    "            transform.SetModeToAffine()\n",
    "        transform.Update()\n",
    "        transformedpoints = vtk.vtkPoints()\n",
    "        transform.TransformPoints(mesh.GetPoints(), transformedpoints)\n",
    "        # push the transformed points into the mesh\n",
    "        mesh.SetPoints(transformedpoints)\n",
    "        vtk_mesh_group.AddInputData(mesh)\n",
    "    vtk_mesh_group.Update()\n",
    "    # vtk_mesh_group is the group of meshes that have been rigidly aligned\n",
    "\n",
    "    # execute procrustes on vtk_mesh_group according to the input mode\n",
    "    procrustes_output, procrustes_mean_points = execute_procrustes(vtk_mesh_group.GetOutput(), mode=mode)\n",
    "    # apply the 'mode' transform to each mesh of vtk_mesh_group\n",
    "    out_vtk_mesh_group = vtk.vtkMultiBlockDataGroupFilter()\n",
    "    for idx in range(vtk_mesh_group.GetOutput().GetNumberOfBlocks()):\n",
    "        # source mesh is the idx of vtk_mesh_group\n",
    "        mesh = vtk_mesh_group.GetOutput().GetBlock(idx)\n",
    "        sourcepoints = mesh.GetPoints()\n",
    "        # target mesh is the procrustes output \n",
    "        targetpoints = procrustes_output.GetBlock(idx).GetPoints()\n",
    "        # transform the points\n",
    "        transform = vtk.vtkLandmarkTransform()\n",
    "        transform.SetSourceLandmarks(sourcepoints)\n",
    "        transform.SetTargetLandmarks(targetpoints)\n",
    "        if mode == 'similarity':\n",
    "            transform.SetModeToSimilarity()\n",
    "        elif mode == 'rigid':\n",
    "            transform.SetModeToRigidBody()\n",
    "        elif mode == 'affine':\n",
    "            transform.SetModeToAffine()\n",
    "        transform.Update()\n",
    "        transformedpoints = vtk.vtkPoints()\n",
    "        transform.TransformPoints(sourcepoints, transformedpoints)\n",
    "        # push the transformed points into the mesh\n",
    "        mesh.SetPoints(transformedpoints)\n",
    "        out_vtk_mesh_group.AddInputData(mesh)\n",
    "        # write the output mesh if needed\n",
    "        if write_outputs:\n",
    "            m = meshfiles[idx]\n",
    "            odir = os.path.join(os.path.dirname(m), 'outputs')\n",
    "            if not os.path.exists(odir):\n",
    "                os.mkdir(odir)\n",
    "            w = vtk.vtkPolyDataWriter()\n",
    "            w.SetFileName(os.path.join(odir, os.path.basename(m)))\n",
    "            w.SetInputData(mesh)\n",
    "            w.Update()\n",
    "\n",
    "    out_vtk_mesh_group.Update()\n",
    "    # vtk_mesh_group is the group of meshes that have been 'mode' aligned\n",
    "    \n",
    "    return out_vtk_mesh_group.GetOutput()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Find meshes and landmark files\n",
    "mpslandmarksfiles = glob('{}{}*.mps'.format(working_directory, os.sep))\n",
    "meshfiles         = glob('{}{}*.vtk'.format(working_directory, os.sep))\n",
    "\n",
    "# remove already aligned meshes\n",
    "#meshfiles[:] = [el for el in meshfiles if not (('initial_template.vtk' in el) or ('_r.vtk' in el)) ]\n",
    "#landmarksfiles[:] = [el for el in landmarksfiles if not ('data.csv' in el)]\n",
    "\n",
    "### assert similar size and sort lists\n",
    "mpslandmarksfiles.sort()\n",
    "meshfiles.sort()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "similarity compensation with factor=23.09\n",
      "similarity compensation with factor=1.00\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# # align the landmarks to regress translation (and size)\n",
    "\n",
    "m_rigid = align_meshes_to_center(meshfiles, mpslandmarksfiles, mode='rigid', write_outputs=False)\n",
    "m_simil = align_meshes_to_center(meshfiles, mpslandmarksfiles, mode='similarity', write_outputs=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g1 = df.index[df['GroupId'] < 0].tolist()\n",
    "g2 = df.index[df['GroupId'] > 0].tolist()\n",
    "\n",
    "centroid_sizes = []\n",
    "for method in (m_rigid,):\n",
    "    for groupid in (g2, g1):\n",
    "        datasets = [method.GetBlock(idx) for idx in groupid]\n",
    "        centroid_sizes.append([centroid_size(vtk_to_numpy(d)) for d in datasets])\n",
    "\n",
    "labels = ('Carriers', 'Wild Types') \n",
    "\n",
    "font = {'weight' : 'normal',\n",
    "        'size'   : 14}\n",
    "\n",
    "plt.rc('font', **font)\n",
    "\n",
    "fig = plt.figure(figsize=[5,5])\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "ax.grid(which='major', axis='both')\n",
    "ax.boxplot(centroid_sizes, labels=labels)\n",
    "ax.set_title('Craniums')\n",
    "ax.set_ylabel('mm')\n",
    "# ax.set_ylim((3,8))\n",
    "plt.savefig(os.path.join(working_directory, 'centroid-size lmb.pdf'))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "centroid_sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[6.69850039903587,\n",
       "  6.661563264135345,\n",
       "  6.9354392506938645,\n",
       "  6.5885233078557155,\n",
       "  6.88443959628176,\n",
       "  6.938165542208045,\n",
       "  6.916859358155702,\n",
       "  6.825226147302115,\n",
       "  6.796492487421158,\n",
       "  7.069575525577299],\n",
       " [7.057890519007956,\n",
       "  7.015212828655567,\n",
       "  6.996540641720139,\n",
       "  6.918939268127656,\n",
       "  6.850776573474887,\n",
       "  6.931491292658292,\n",
       "  7.073771283304273,\n",
       "  7.127479169763626,\n",
       "  7.103535573942651,\n",
       "  7.061296793839985]]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centroid_sizes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
